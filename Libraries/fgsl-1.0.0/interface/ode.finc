!-*-f90-*-
!
!  Interfaces: Ordinary differential equations
!
#if GSL_VERSION_MAJOR_FORTRAN >= 1 && GSL_VERSION_MINOR_FORTRAN >= 15
     function fgsl_odeiv2_system_cinit(func, dimension, params, jacobian) bind(c)
       import
       type(c_funptr), value :: func
       integer(c_size_t), value :: dimension
       type(c_ptr), value :: params
       type(c_funptr), value :: jacobian
       type(c_ptr) :: fgsl_odeiv2_system_cinit
     end function fgsl_odeiv2_system_cinit
     subroutine fgsl_odeiv2_system_cfree(system) bind(c)
       import
       type(c_ptr), value :: system
     end subroutine fgsl_odeiv2_system_cfree
     function gsl_odeiv2_step_alloc(t, dim) bind(c)
       import
       type(c_ptr), value :: t
       integer(c_size_t), value :: dim
       type(c_ptr) :: gsl_odeiv2_step_alloc
     end function gsl_odeiv2_step_alloc
     function gsl_odeiv2_step_reset(s) bind(c)
       import 
       type(c_ptr), value :: s
       integer(c_int) :: gsl_odeiv2_step_reset
     end function gsl_odeiv2_step_reset
     subroutine gsl_odeiv2_step_free(s) bind(c)
       import 
       type(c_ptr), value :: s
     end subroutine gsl_odeiv2_step_free
     function gsl_odeiv2_step_name (s) bind(c)
       import
       type(c_ptr), value :: s
       type(c_ptr) :: gsl_odeiv2_step_name
     end function gsl_odeiv2_step_name
     function gsl_odeiv2_step_order(s) bind(c)
       import
       type(c_ptr), value :: s
       integer(c_int) :: gsl_odeiv2_step_order
     end function gsl_odeiv2_step_order
     function gsl_odeiv2_step_set_driver(s,d) bind(c)
       import
       type(c_ptr), value :: s, d
       integer(c_int) :: gsl_odeiv2_step_set_driver
     end function gsl_odeiv2_step_set_driver
     function gsl_odeiv2_step_apply(s, t, h, y, yerr, dydt_in, dydt_out, sys) bind(c)
       import
       type(c_ptr), value :: s
       real(c_double), value :: t, h
       real(c_double), dimension(*), intent(inout) :: y, yerr, dydt_out
       real(c_double), dimension(*), intent(in) :: dydt_in
       type(c_ptr), value :: sys
       integer(c_int) :: gsl_odeiv2_step_apply
     end function gsl_odeiv2_step_apply
     function fgsl_aux_odeiv2_step_alloc(step_type) bind(c)
       import
       integer(c_int), value :: step_type
       type(c_ptr) :: fgsl_aux_odeiv2_step_alloc
     end function fgsl_aux_odeiv2_step_alloc
     function gsl_odeiv2_control_standard_new(eps_abs, eps_rel, a_y, a_dydt) bind(c)
       import
       real(c_double), value :: eps_abs, eps_rel, a_y, a_dydt
       type(c_ptr) :: gsl_odeiv2_control_standard_new
     end function gsl_odeiv2_control_standard_new
     function gsl_odeiv2_control_y_new(eps_abs, eps_rel) bind(c)
       import
       real(c_double), value :: eps_abs, eps_rel
       type(c_ptr) :: gsl_odeiv2_control_y_new
     end function gsl_odeiv2_control_y_new
     function gsl_odeiv2_control_yp_new(eps_abs, eps_rel) bind(c)
       import
       real(c_double), value :: eps_abs, eps_rel
       type(c_ptr) :: gsl_odeiv2_control_yp_new
     end function gsl_odeiv2_control_yp_new
     function gsl_odeiv2_control_scaled_new(eps_abs, eps_rel, a_y, a_dydt, &
          scale_abs, dim) bind(c)
       import
       real(c_double), value :: eps_abs, eps_rel, a_y, a_dydt
       real(c_double), dimension(*), intent(in) :: scale_abs
       integer(c_size_t), value :: dim
       type(c_ptr) :: gsl_odeiv2_control_scaled_new
     end function gsl_odeiv2_control_scaled_new
     function gsl_odeiv2_control_alloc(t) bind(c)
       import
       type(c_ptr), value :: t
       type(c_ptr) :: gsl_odeiv2_control_alloc
     end function gsl_odeiv2_control_alloc
     function gsl_odeiv2_control_init(c, eps_abs, eps_rel, a_y, a_dydt) bind(c)
       import
       type(c_ptr), value :: c
       real(c_double), value :: eps_abs, eps_rel, a_y, a_dydt
       integer(c_int) :: gsl_odeiv2_control_init
     end function gsl_odeiv2_control_init
     subroutine gsl_odeiv2_control_free(c) bind(c)
       import
       type(c_ptr), value :: c
     end subroutine gsl_odeiv2_control_free
     function gsl_odeiv2_control_hadjust(c, s, y0, yerr, dydt, h) bind(c)
       import
       type(c_ptr), value :: c, s
       real(c_double), dimension(*), intent(in) :: y0, yerr, dydt
       real(c_double), dimension(*), intent(inout) :: h
       integer(c_int) :: gsl_odeiv2_control_hadjust
     end function gsl_odeiv2_control_hadjust
     function gsl_odeiv2_control_name (c) bind(c)
       import
       type(c_ptr), value :: c
       type(c_ptr) :: gsl_odeiv2_control_name
     end function gsl_odeiv2_control_name
     function gsl_odeiv2_control_errlevel(c, y, dydt, h, ind, errlev) bind(c)
       import
       type(c_ptr), value :: c
       real(c_double), value :: y, dydt, h
       integer(c_size_t), value :: ind
       real(c_double) :: errlev
       integer(c_int) :: gsl_odeiv2_control_errlevel
     end function gsl_odeiv2_control_errlevel
     function gsl_odeiv2_control_set_driver(c, d) bind(c)
       import
       type(c_ptr), value :: c, d
       integer(c_int) :: gsl_odeiv2_control_set_driver
     end function gsl_odeiv2_control_set_driver
     function gsl_odeiv2_evolve_alloc(dim) bind(c)
       import
       integer(c_size_t), value :: dim
       type(c_ptr) gsl_odeiv2_evolve_alloc
     end function gsl_odeiv2_evolve_alloc
     function gsl_odeiv2_evolve_apply(e, con, step, sys, t, t1, h, y) bind(c)
       import
       type(c_ptr), value :: e, con, step, sys
       real(c_double), dimension(*), intent(inout) :: y
       real(c_double), intent(inout) :: t, h
       real(c_double), value :: t1
       integer(c_int) :: gsl_odeiv2_evolve_apply
     end function gsl_odeiv2_evolve_apply
     function gsl_odeiv2_evolve_apply_fixed_step(e, con, step, sys, t, h, y) bind(c)
       import
       type(c_ptr), value :: e, con, step, sys
       real(c_double), dimension(*), intent(inout) :: y
       real(c_double), intent(inout) :: t, h
       integer(c_int) :: gsl_odeiv2_evolve_apply_fixed_step
     end function gsl_odeiv2_evolve_apply_fixed_step
     function gsl_odeiv2_evolve_reset(s) bind(c)
       import 
       type(c_ptr), value :: s
       integer(c_int) :: gsl_odeiv2_evolve_reset
     end function gsl_odeiv2_evolve_reset
     subroutine gsl_odeiv2_evolve_free(s) bind(c)
       import 
       type(c_ptr), value :: s
     end subroutine gsl_odeiv2_evolve_free
     function gsl_odeiv2_evolve_set_driver(c, d) bind(c)
       import
       type(c_ptr), value :: c, d
       integer(c_int) :: gsl_odeiv2_evolve_set_driver
     end function gsl_odeiv2_evolve_set_driver
     function gsl_odeiv2_driver_alloc_y_new(sys, t, hstart, epsabs, epsrel) bind(c)
       import
       type(c_ptr), value :: sys, t
       real(c_double), value :: hstart, epsabs, epsrel
       type(c_ptr) :: gsl_odeiv2_driver_alloc_y_new
     end function gsl_odeiv2_driver_alloc_y_new
     function gsl_odeiv2_driver_alloc_yp_new(sys, t, hstart, epsabs, epsrel) bind(c)
       import
       type(c_ptr), value :: sys, t
       real(c_double), value :: hstart, epsabs, epsrel
       type(c_ptr) :: gsl_odeiv2_driver_alloc_yp_new
     end function gsl_odeiv2_driver_alloc_yp_new
     function gsl_odeiv2_driver_alloc_standard_new(sys, t, hstart, epsabs, epsrel, &
          a_y, a_dydt) bind(c)
       import
       type(c_ptr), value :: sys, t
       real(c_double), value :: hstart, epsabs, epsrel, a_y, a_dydt
       type(c_ptr) :: gsl_odeiv2_driver_alloc_standard_new
     end function gsl_odeiv2_driver_alloc_standard_new
     function gsl_odeiv2_driver_alloc_scaled_new(sys, t, hstart, epsabs, epsrel, &
          a_y, a_dydt, scale_abs) bind(c)
       import
       type(c_ptr), value :: sys, t
       real(c_double), value :: hstart, epsabs, epsrel, a_y, a_dydt
       real(c_double) :: scale_abs(*)
       type(c_ptr) :: gsl_odeiv2_driver_alloc_scaled_new
     end function gsl_odeiv2_driver_alloc_scaled_new
     function gsl_odeiv2_driver_set_hmin(d, hmin) bind(c)
       import
       type(c_ptr), value :: d
       real(c_double), value :: hmin
       integer(c_int) :: gsl_odeiv2_driver_set_hmin
     end function gsl_odeiv2_driver_set_hmin
     function gsl_odeiv2_driver_set_hmax(d, hmax) bind(c)
       import
       type(c_ptr), value :: d
       real(c_double), value :: hmax
       integer(c_int) :: gsl_odeiv2_driver_set_hmax
     end function gsl_odeiv2_driver_set_hmax
     function gsl_odeiv2_driver_set_nmax(d, nmax) bind(c)
       import
       type(c_ptr), value :: d
       integer(c_long), value :: nmax
       integer(c_int) :: gsl_odeiv2_driver_set_nmax
     end function gsl_odeiv2_driver_set_nmax
     function gsl_odeiv2_driver_apply(d, t, t1, y) bind(c)
       import
       type(c_ptr), value :: d
       real(c_double) :: t
       real(c_double), value :: t1
      real(c_double) :: y(*)
       integer(c_int) :: gsl_odeiv2_driver_apply
     end function gsl_odeiv2_driver_apply
     function gsl_odeiv2_driver_apply_fixed_step(d, t, h, n, y) bind(c)
       import
       type(c_ptr), value :: d
       real(c_double) :: t
       real(c_double), value :: h
       integer(c_long), value :: n
       real(c_double) :: y(*)
       integer(c_int) :: gsl_odeiv2_driver_apply_fixed_step
     end function gsl_odeiv2_driver_apply_fixed_step
     function gsl_odeiv2_driver_reset(d) bind(c)
       import
       type(c_ptr), value :: d
       integer(c_int) :: gsl_odeiv2_driver_reset
     end function gsl_odeiv2_driver_reset
     subroutine gsl_odeiv2_driver_free(d) bind(c)
       import
       type(c_ptr), value :: d
     end subroutine gsl_odeiv2_driver_free
#endif
#if GSL_VERSION_MAJOR_FORTRAN >= 1 && GSL_VERSION_MINOR_FORTRAN >= 16
     function gsl_odeiv2_driver_reset_hstart(d, hstart) bind(c)
       import
       type(c_ptr), value :: d
       real(c_double), value :: hstart
       integer(c_int) :: gsl_odeiv2_driver_reset_hstart
     end function gsl_odeiv2_driver_reset_hstart
#endif

!  obsolescent legacy interface
     function gsl_odeiv_step_alloc(t, dim) bind(c)
       import
       type(c_ptr), value :: t
       integer(c_size_t), value :: dim
       type(c_ptr) :: gsl_odeiv_step_alloc
     end function gsl_odeiv_step_alloc
     function fgsl_aux_odeiv_step_alloc(step_type) bind(c)
       import
       integer(c_int), value :: step_type
       type(c_ptr) :: fgsl_aux_odeiv_step_alloc
     end function fgsl_aux_odeiv_step_alloc
     function fgsl_odeiv_system_cinit(func, dimension, params, jacobian) bind(c)
       import
       type(c_funptr), value :: func
       integer(c_size_t), value :: dimension
       type(c_ptr), value :: params
       type(c_funptr), value :: jacobian
       type(c_ptr) :: fgsl_odeiv_system_cinit
     end function fgsl_odeiv_system_cinit
     subroutine fgsl_odeiv_system_cfree(system) bind(c)
       import
       type(c_ptr), value :: system
     end subroutine fgsl_odeiv_system_cfree
     function gsl_odeiv_step_reset(s) bind(c)
       import 
       type(c_ptr), value :: s
       integer(c_int) :: gsl_odeiv_step_reset
     end function gsl_odeiv_step_reset
     subroutine gsl_odeiv_step_free(s) bind(c)
       import 
       type(c_ptr), value :: s
     end subroutine gsl_odeiv_step_free
     function gsl_odeiv_step_name (s) bind(c)
       import
       type(c_ptr), value :: s
       type(c_ptr) :: gsl_odeiv_step_name
     end function gsl_odeiv_step_name
     function gsl_odeiv_step_order(s) bind(c)
       import
       type(c_ptr), value :: s
       integer(c_int) :: gsl_odeiv_step_order
     end function gsl_odeiv_step_order
     function gsl_odeiv_step_apply(s, t, h, y, yerr, dydt_in, dydt_out, dydt) bind(c)
       import
       type(c_ptr), value :: s
       real(c_double), value :: t, h
       real(c_double), dimension(*), intent(inout) :: y, yerr, dydt_in, dydt_out
       type(c_ptr), value :: dydt
       integer(c_int) :: gsl_odeiv_step_apply
     end function gsl_odeiv_step_apply
     function gsl_odeiv_control_standard_new(eps_abs, eps_rel, a_y, a_dydt) bind(c)
       import
       real(c_double), value :: eps_abs, eps_rel, a_y, a_dydt
       type(c_ptr) :: gsl_odeiv_control_standard_new
     end function gsl_odeiv_control_standard_new
     function gsl_odeiv_control_y_new(eps_abs, eps_rel) bind(c)
       import
       real(c_double), value :: eps_abs, eps_rel
       type(c_ptr) :: gsl_odeiv_control_y_new
     end function gsl_odeiv_control_y_new
     function gsl_odeiv_control_yp_new(eps_abs, eps_rel) bind(c)
       import
       real(c_double), value :: eps_abs, eps_rel
       type(c_ptr) :: gsl_odeiv_control_yp_new
     end function gsl_odeiv_control_yp_new
     function gsl_odeiv_control_scaled_new(eps_abs, eps_rel, a_y, a_dydt, &
          scale_abs, dim) bind(c)
       import
       real(c_double), value :: eps_abs, eps_rel, a_y, a_dydt
       real(c_double), dimension(*), intent(in) :: scale_abs
       integer(c_size_t), value :: dim
       type(c_ptr) :: gsl_odeiv_control_scaled_new
     end function gsl_odeiv_control_scaled_new
     function gsl_odeiv_control_alloc(t) bind(c)
       import
       type(c_ptr), value :: t
       type(c_ptr) :: gsl_odeiv_control_alloc
     end function gsl_odeiv_control_alloc
     function gsl_odeiv_control_init(c, eps_abs, eps_rel, a_y, a_dydt) bind(c)
       import
       type(c_ptr), value :: c
       real(c_double), value :: eps_abs, eps_rel, a_y, a_dydt
       integer(c_int) :: gsl_odeiv_control_init
     end function gsl_odeiv_control_init
     subroutine gsl_odeiv_control_free(c) bind(c)
       import
       type(c_ptr), value :: c
     end subroutine gsl_odeiv_control_free
     function gsl_odeiv_control_hadjust(c, s, y0, yerr, dydt, h) bind(c)
       import
       type(c_ptr), value :: c, s
       real(c_double), dimension(*), intent(in) :: y0, yerr, dydt
       real(c_double), dimension(*), intent(inout) :: h
       integer(c_int) :: gsl_odeiv_control_hadjust
     end function gsl_odeiv_control_hadjust
     function gsl_odeiv_control_name (c) bind(c)
       import
       type(c_ptr), value :: c
       type(c_ptr) :: gsl_odeiv_control_name
     end function gsl_odeiv_control_name
     function gsl_odeiv_evolve_alloc(dim) bind(c)
       import
       integer(c_size_t), value :: dim
       type(c_ptr) gsl_odeiv_evolve_alloc
     end function gsl_odeiv_evolve_alloc
     function gsl_odeiv_evolve_apply(e, con, step, dydt, t, t1, h, y) bind(c)
       import
       type(c_ptr), value :: e, con, step, dydt
       real(c_double), dimension(*), intent(inout) :: y
       real(c_double), intent(inout) :: t, h
       real(c_double), value :: t1
       integer(c_int) :: gsl_odeiv_evolve_apply
     end function gsl_odeiv_evolve_apply
     function gsl_odeiv_evolve_reset(s) bind(c)
       import 
       type(c_ptr), value :: s
       integer(c_int) :: gsl_odeiv_evolve_reset
     end function gsl_odeiv_evolve_reset
     subroutine gsl_odeiv_evolve_free(s) bind(c)
       import 
       type(c_ptr), value :: s
     end subroutine gsl_odeiv_evolve_free

!-*-f90-*-
!
!  Interfaces: non-linear least-squares fitting
!
  function gsl_multifit_fsolver_alloc(t, n, p) bind(c)
    import
    type(c_ptr), value :: t
    integer(c_size_t), value :: n, p
    type(c_ptr) :: gsl_multifit_fsolver_alloc
  end function gsl_multifit_fsolver_alloc
  function gsl_multifit_fdfsolver_alloc(t, n, p) bind(c)
    import
    type(c_ptr), value :: t
    integer(c_size_t), value :: n, p
    type(c_ptr) :: gsl_multifit_fdfsolver_alloc
  end function gsl_multifit_fdfsolver_alloc
  function gsl_multifit_fsolver_set(s, f, x) bind(c)
    import
    type(c_ptr), value :: s, f, x
    integer(c_int) :: gsl_multifit_fsolver_set
  end function gsl_multifit_fsolver_set
  function gsl_multifit_fdfsolver_set(s, f, x) bind(c)
    import
    type(c_ptr), value :: s, f, x
    integer(c_int) :: gsl_multifit_fdfsolver_set
  end function gsl_multifit_fdfsolver_set
  subroutine gsl_multifit_fsolver_free(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
  end subroutine gsl_multifit_fsolver_free
  subroutine gsl_multifit_fdfsolver_free(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
  end subroutine gsl_multifit_fdfsolver_free
  function gsl_multifit_fsolver_name(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
    type(c_ptr) :: gsl_multifit_fsolver_name
  end function gsl_multifit_fsolver_name
  function gsl_multifit_fdfsolver_name(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
    type(c_ptr) :: gsl_multifit_fdfsolver_name
  end function gsl_multifit_fdfsolver_name
  function gsl_multifit_fsolver_iterate(s) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: s
    integer(c_int) :: gsl_multifit_fsolver_iterate
  end function gsl_multifit_fsolver_iterate
  function gsl_multifit_fdfsolver_iterate(s) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: s
    integer(c_int) :: gsl_multifit_fdfsolver_iterate
  end function gsl_multifit_fdfsolver_iterate
  function gsl_multifit_fsolver_position(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
    type(c_ptr) :: gsl_multifit_fsolver_position
  end function gsl_multifit_fsolver_position
  function gsl_multifit_fdfsolver_position(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
    type(c_ptr) :: gsl_multifit_fdfsolver_position
  end function gsl_multifit_fdfsolver_position
  function gsl_multifit_fdfsolver_dx(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
    type(c_ptr) :: gsl_multifit_fdfsolver_dx
  end function gsl_multifit_fdfsolver_dx
  function gsl_multifit_fdfsolver_f(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
    type(c_ptr) :: gsl_multifit_fdfsolver_f
  end function gsl_multifit_fdfsolver_f
  function gsl_multifit_fdfsolver_jac(s) bind(c)
    import :: c_ptr
    type(c_ptr), value :: s
    type(c_ptr) :: gsl_multifit_fdfsolver_jac
  end function gsl_multifit_fdfsolver_jac
  function gsl_multifit_test_delta(dx, x, epsabs, epsrel) bind(c)
    import :: c_ptr, c_int, c_double
    type(c_ptr), value :: dx, x
    real(c_double), value :: epsabs, epsrel
    integer(c_int) :: gsl_multifit_test_delta
  end function gsl_multifit_test_delta
  function gsl_multifit_test_gradient(g, epsabs) bind(c)
    import :: c_ptr, c_int, c_double
    type(c_ptr), value :: g
    real(c_double), value :: epsabs
    integer(c_int) :: gsl_multifit_test_gradient
  end function gsl_multifit_test_gradient
  function gsl_multifit_gradient(j, f, g) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: j, f, g
    integer(c_int) :: gsl_multifit_gradient
  end function gsl_multifit_gradient
  function gsl_multifit_covar(j, epsrel, cov) bind(c)
    import :: c_ptr, c_int, c_double
    type(c_ptr), value :: j, cov
    real(c_double), value :: epsrel
    integer(c_int) :: gsl_multifit_covar
  end function gsl_multifit_covar
#if GSL_VERSION_MAJOR_FORTRAN >= 1 && GSL_VERSION_MINOR_FORTRAN >= 16
  function fgsl_aux_multifit_robust_alloc(i) bind(c)
    import :: c_int, c_ptr
    type(c_ptr) :: fgsl_aux_multifit_robust_alloc
    integer(c_int), value :: i
  end function fgsl_aux_multifit_robust_alloc
  function gsl_multifit_fsolver_driver(s, maxiter, epsabs, epsrel) bind(c)
    import :: c_ptr, c_size_t, c_double, c_int
    type(c_ptr), value :: s
    integer(c_size_t), value :: maxiter
    real(c_double), value :: epsabs, epsrel
    integer(c_int) :: gsl_multifit_fsolver_driver
  end function gsl_multifit_fsolver_driver
  function gsl_multifit_fdfsolver_driver(s, maxiter, epsabs, epsrel) bind(c)
    import :: c_ptr, c_size_t, c_double, c_int
    type(c_ptr), value :: s
    integer(c_size_t), value :: maxiter
    real(c_double), value :: epsabs, epsrel
    integer(c_int) :: gsl_multifit_fdfsolver_driver
  end function gsl_multifit_fdfsolver_driver
  function gsl_multifit_fdfsolver_dif_df(x, fdf, f, J) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: x, fdf, f, J
    integer(c_int) :: gsl_multifit_fdfsolver_dif_df
  end function gsl_multifit_fdfsolver_dif_df
  function gsl_multifit_fdfsolver_dif_fdf(x, fdf, f, J) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: x, fdf, f, J
    integer(c_int) :: gsl_multifit_fdfsolver_dif_fdf
  end function gsl_multifit_fdfsolver_dif_fdf
  function gsl_multifit_robust_alloc(T, n, p) bind(c)
    import :: c_ptr, c_size_t
    type(c_ptr), value :: T
    integer(c_size_t), value :: n, p
    type(c_ptr) :: gsl_multifit_robust_alloc
  end function gsl_multifit_robust_alloc
  subroutine gsl_multifit_robust_free(w) bind(c)
    import :: c_ptr
    type(c_ptr), value :: w
  end subroutine gsl_multifit_robust_free
  function gsl_multifit_robust_tune(tune, w) bind(c)
    import :: c_ptr, c_double, c_int
    real(c_double), value :: tune
    type(c_ptr), value :: w
    integer(c_int) :: gsl_multifit_robust_tune
  end function gsl_multifit_robust_tune
  function gsl_multifit_robust_name(w) bind(c)
    import :: c_ptr
    type(c_ptr), value :: w
    type(c_ptr) :: gsl_multifit_robust_name
  end function gsl_multifit_robust_name
  function gsl_multifit_robust_statistics(w) bind(c)
    import :: c_ptr, gsl_multifit_robust_stats
    type(c_ptr), value :: w
    type(gsl_multifit_robust_stats) :: gsl_multifit_robust_statistics
  end function gsl_multifit_robust_statistics
  function gsl_multifit_robust(X, y, c, cov, w) bind(c)
    import :: c_ptr, c_int
    type(c_ptr), value :: X, y, c, cov, w
    integer(c_int) :: gsl_multifit_robust
  end function gsl_multifit_robust
  function gsl_multifit_robust_est(x, c, cov, y, y_err) bind(c)
    import :: c_ptr, c_int, c_double
    type(c_ptr), value :: x, c, cov
    real(c_double), intent(out) :: y, y_err
    integer(c_int) :: gsl_multifit_robust_est
  end function gsl_multifit_robust_est
#endif
!
  function fgsl_multifit_function_cinit(fp, ndim, p, params) bind(c)
    import 
    type(c_funptr), value :: fp
    integer(c_size_t), value :: ndim, p
    type(c_ptr), value :: params
    type(c_ptr) :: fgsl_multifit_function_cinit
  end function fgsl_multifit_function_cinit
  function fgsl_multifit_function_fdf_cinit(fp, dfp, fdfp, ndim, p, params) bind(c)
    import
    type(c_funptr), value :: fp, dfp, fdfp
    integer(c_size_t), value :: ndim, p
    type(c_ptr), value :: params
    type(c_ptr) :: fgsl_multifit_function_fdf_cinit
  end function fgsl_multifit_function_fdf_cinit
  subroutine fgsl_multifit_function_cfree(f) bind(c)
    import :: c_ptr
    type(c_ptr), value :: f
  end subroutine fgsl_multifit_function_cfree
  subroutine fgsl_multifit_function_fdf_cfree(f) bind(c)
    import :: c_ptr
    type(c_ptr), value :: f
  end subroutine fgsl_multifit_function_fdf_cfree
  function fgsl_aux_multifit_fsolver_alloc(it) bind(c)
    import
    integer(c_int), value :: it
    type(c_ptr) :: fgsl_aux_multifit_fsolver_alloc
  end function fgsl_aux_multifit_fsolver_alloc
  function fgsl_aux_multifit_fdfsolver_alloc(it) bind(c)
    import
    integer(c_int), value :: it
    type(c_ptr) :: fgsl_aux_multifit_fdfsolver_alloc
  end function fgsl_aux_multifit_fdfsolver_alloc
